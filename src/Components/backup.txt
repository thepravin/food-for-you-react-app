import { useEffect, useState } from "react";
import { cloud_image, res_list, restaurantsList } from "../Data/constant";
import SimmerUI from "./SimmerUI";
import { Link } from "react-router-dom";

const RestaurantsCard = ({
  name,
  cuisines,
  avgRatingString,
  cloudinaryImageId,
}) => {
  return (
    <div className="card-wraper">
      <div className="card">
        <img alt="image" src={cloud_image + cloudinaryImageId} />
        <h2>{name}</h2>
        <h3>{cuisines.join(",")}</h3>
        <h4>{avgRatingString}</h4>
      </div>
    </div>
  );
};

function filterData(searchInput, allRestaurants) {
  const temp = allRestaurants.filter((restaurant) =>
    restaurant?.info?.name.toLowerCase().includes(searchInput.toLowerCase())
  );

  return temp;
}

export default function Body() {
  const [searchInput, setSearchInput] = useState("");
  const [filteredRestaurants, setFilteredRestaurants] = useState([]); // initialy all restaurants show
  const [allRestaurants, setAllRestaurants] = useState([]);
  const [errorMessgae, setErrorMessage] = useState("");

  // Api
  async function getRestaurants() {
    try {
      const data = await fetch(res_list);
      const json = await data.json();
      const fetchedRestaurants =
        json?.data?.cards[1]?.card?.card?.gridElements?.infoWithStyle
          ?.restaurants;
      setAllRestaurants(fetchedRestaurants || []); // Set to an empty array if the data is not available
      setFilteredRestaurants(fetchedRestaurants || []);
    } catch (error) {
      console.error("Error fetching restaurants:", error);
    }
  }

  useEffect(() => {
    getRestaurants();
  }, []);

  if (!allRestaurants) return null;

  // Search Data
  const searchData = (searchInput, allRestaurants) => {
    if (searchInput !== "") {
      const filterRes = filterData(searchInput, allRestaurants);
      setFilteredRestaurants(filterRes);
      setErrorMessage("");
      if (filterRes?.length === 0) {
        setErrorMessage(
          `Soory, we couldn't find any results for "${searchInput}"`
        );
      }
    } else {
      setErrorMessage("");
      setFilteredRestaurants(allRestaurants);
    }
  };

  // this is conditional componenet rendering
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          value={searchInput}
          onChange={(event) => {
            setSearchInput(event.target.value);
          }}
        />
        <div>
          <button
            className="search-button"
            onClick={() => {
              searchData(searchInput, allRestaurants);
            }}
          >
            Search
          </button>
        </div>
      </div>

      {errorMessgae && <div className="error-message">{errorMessgae}</div>}

      {allRestaurants?.length === 0 ? (
        <SimmerUI />
      ) : (
        <div className="restaurants-list">
          {filteredRestaurants.map((restaurant) => {
            return (
              <Link
                to={"/resturant/" + restaurant.info.id}
                key={restaurant.info.id}
              >
                <RestaurantsCard {...restaurant.info} />
              </Link>
            );
          })}
        </div>
      )}
    </>
  );
}



//////////////////////////////////////////////////////////////

import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { ITEM_IMG_CDN_URL, cloud_image, res_menu } from "../Data/constant";

export default function ResturentMeniu() {
  const { id } = useParams();

  
  const [restaurant, setRestaurant] = useState(null);
  const [menuData, setMenuData] = useState([]);

  // Api
  async function getRestaurants() {
    try {
      const data = await fetch(res_menu + id);
      const json = await data.json();     
      const restaurantData = json?.data?.cards[0]?.card?.card?.info || null;
      setRestaurant(restaurantData);

      // set menu itsm
      const menuItemsData =
        json?.data?.cards
          .find((x) => x.groupedCard)
          ?.groupedCard?.cardGroupMap?.REGULAR?.cards?.map((x) => x.card?.card)
          ?.filter(
            (x) =>
              x["@type"] ==
              "type.googleapis.com/swiggy.presentation.food.v2.ItemCategory"
          )
          ?.map((x) => x.itemCards)
          .flat()
          .map((x) => x.card?.info) || [];

      const uniqueMenuItems = [];
      menuItemsData.forEach((item) => {
        if (!uniqueMenuItems.find((x) => x.id === item.id)) {
          uniqueMenuItems.push(item);
        }
      });
      setMenuData(uniqueMenuItems);
    } catch (error) {
      console.error("Error fetching restaurants:", error);
    }
  }

  useEffect(() => {
    getRestaurants();
  }, []);

  return (
    <>
      <div className="restaurant-menu">
        <div className="restaurant-summary">
          <img
            className="restaurant-img"
            src={cloud_image + restaurant?.cloudinaryImageId}
            alt={restaurant?.name}
          />
          <div className="restaurant-summary-details">
            <h2 className="restaurant-title">{restaurant?.name}</h2>
            <p className="restaurant-tags">
              {restaurant?.cuisines?.join(", ")}
            </p>
            <div className="restaurant-details">
              <div
                className="restaurant-rating"
                style={
                  restaurant?.avgRating < 4
                    ? { backgroundColor: "var(--light-red)" }
                    : restaurant?.avgRating === "--"
                    ? { backgroundColor: "white", color: "black" }
                    : { color: "white" }
                }
              >
                <i className="fa-solid fa-star"></i>
                <span>{restaurant?.avgRating}</span>
              </div>
              <div className="restaurant-rating-slash">|</div>
              <div>{restaurant?.sla?.slaString}</div>
              <div className="restaurant-rating-slash">|</div>
              <div>{restaurant?.costForTwoMessage}</div>
            </div>
          </div>
        </div>

        <div className="restaurant-menu-content">
          <div className="menu-items-container">
            <div className="menu-title-wrap">
              <h3 className="menu-title">Recommended</h3>
              <p className="menu-count">{menuData.length} ITEMS</p>
            </div>
            <div className="menu-items-list">
              {Object.values(menuData).map((item) => (
                <div className="menu-item" key={item?.id}>
                  <div className="menu-item-details">
                    <h3 className="item-title">{item?.name}</h3>
                    <p className="item-cost">
                      {item?.price > 0
                        ? new Intl.NumberFormat("en-IN", {
                            style: "currency",
                            currency: "INR",
                          }).format(item?.price / 100)
                        : ""}
                    </p>
                    <p className="item-desc">{item?.description}</p>
                  </div>
                  <div className="menu-img-wrapper">
                    {item?.imageId && (
                      <img
                        src={ITEM_IMG_CDN_URL + item?.imageId}
                        alt=""
                        className="menu-item-img"
                      />
                    )}
                    <button className="add-btn">ADD+</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
